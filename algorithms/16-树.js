/*
* 数组：
优点：
  - 根据下标访问效率会很高
  - 如果根据元素来查找对应的位置？ 比较好的方式是先对数组进行排序，再二分查找
缺点：
  - 需要对数组先进行排序，生成有序数组，才能提高查找效率
  - 插入和删除数据时，需要大量的位移操作，效率低

* 链表：
优点：
  - 插入和删除效率高
缺点：
  - 查找效率低，需要从头开始依次访问链表中的每个数据项，直到找到
  - 即使插入和删除效率很高，但是如果要插入和删除中间位置的数据，还是需要重头先找到对应的数据

* 哈希表：
优点：
  - 插入/查询/删除效率都很高
缺点：
  - 空间利用率不高，底层使用的是数组，某些单元没有被利用
  - 元素是无序的，不能按照固定的顺序来遍历哈希表中的元素
  - 不能快速查找出哈希表中的最大值/最小值这些特殊的值

* 树结构：
  - 树综合了上面的数据结构的优点，也弥补了上面数据结构的缺点
  - 结构是非线性的，可以表示一对多的关系。如文件的目录结构

! 二叉树
  - 左子树
  - 右子树
  - 一个二叉树第 i 层的最大节点数为： 2^(i-1), i >= 1
  - 深度为 k 的二叉树有最大节点总数为： 2^k - 1, k >= 1
  - 对任何非空二叉树 T，若 n0 表示叶节点的个数，n2是度为2的非叶节点个数，那么 n0 = n2 + 1
*/
