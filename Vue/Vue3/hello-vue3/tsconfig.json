{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",

    "checkJs": false, // 是否检查 JS 代码符合规范

    "allowJs": false, // 允许编ç译 js 文件

    "removeComments": false, // 删除注释。 除了以 /！* 开头的版权信息

    "noUnusedLocals": false, // 若有未使用的局部变量则报错

    "noUnusedParameters": false, // 若有未使用的参数则报错

//    "strict": true, // 所有语法检查的总开工，默认开启
     "alwaysStrict": false, // 编译后的文件是否是严格模式
     "noImplicitAny": false, // 不允许隐式推导为any类型
     "noImplicitThis": false, // 不允许不明确的类型 this
     "strictNullChecks": false, // 严格检查空值， null 和 undefined

    "jsx": "preserve", // 指定 jsx 代码用于的开发环境

    "importHelpers": true, // 从 tslib 导入辅助工具函数（比如 __extends， __rest等）

    "moduleResolution": "node", // 模块解析策略。 有 node 和 classic 两种类型

    "experimentalDecorators": true, // 装饰器

    "skipLibCheck": true, // 忽略所有的声明文件的类型检查

    "esModuleInterop": true, // 通过导入内容创建命名空间，实现 CommonJS和ES模块之间的互操作性

    "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块中默认导入

    "sourceMap": true, // 是否生成 map 文件

    "baseUrl": ".", // 解析非相对模块名称的基本目录

    "suppressImplicitAnyIndexErrors": true, // 阻止 noImplicitAny 对缺少索引签名的索引对象报错。

    "types": [
      "webpack-env",
      "node"
    ], // 指定需要包含的模块，只有这里列出的模块的声明文件才会被加载

    "paths": {
      "@/*": [
        "src/*"
      ]
    }, // 设置模块名到基于 baseUrl 的路径映射

    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost",
    ] // 指定需要用到的库
  },

  // 指定哪些ts文件需要被编译。
  // 路径：**表示任意目录，*表示任意文件
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],

  // 指定当解析include选项时，不需要被编译的文件目录。默认值[node_modules, "bower_components", "jspm_packages"]加上 outDir选项指定的值
  "exclude": [
    "node_modules"
  ],

  // 继承第三方配置
  // "extends": ""
}
